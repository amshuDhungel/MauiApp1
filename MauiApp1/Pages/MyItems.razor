@page "/my-items"

@using MudBlazor

@if (items.Count == 0)
{
    <center>
        <h1>No Item yet. go to the store for purchasing</h1>
    </center>
}
else
{
    <MudDataGrid T="InventoryHistory" Items="@items" Sortable="true" QuickFilter="@FilterString" Bordered="true" Dense="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">My Items</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Immediate="true" />
        </ToolBarContent>
        <Columns>
            <Column T="InventoryHistory" Field="ItemName" Title="Item" IsEditable="false" />
            <Column T="InventoryHistory" Field="Quantity" Title="Quantity" IsEditable="true" />
            <Column T="InventoryHistory" Field="ApprovedBy" Title="Approved By" IsEditable="true" />
            <Column T="InventoryHistory" Field="TakenBy" Title="Taken By" IsEditable="true" />
            <Column T="InventoryHistory" Field="OutDate" Title="Taken On" IsEditable="true">
                <CellTemplate>
                    <MudText>@context.Item.OutDate.ToString("MMM dd, yyyy")</MudText>
                </CellTemplate>
            </Column>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="InventoryHistory" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }

    string itemName;
    int quantity;
    DateTime date;
    TimeSpan time;
    string takenBy;
    bool isApproved;

    private ChartOptions options = new();

    List<InventoryHistory> items;

    private string searchString = "";

    private bool FilterString(InventoryHistory element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.ItemName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    protected override void OnInitialized()
    {
        items = InventoryHistoryService.GetAll(_globalState.CurrentUser.Id)
        .Where(i => _globalState.CurrentUser.Username.Equals(i.TakenBy)).ToList();

        var allItems = items.GroupBy(i => i.ItemName);
    }
}
